// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  nickname  String
  avatar    String?  // 아바타 이미지 URL
  role      Role     @default(USER)
  status    UserStatus @default(ACTIVE)
  isEmailVerified Boolean @default(false)
  lastLoginAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  likes     Like[]
  followedBy Follow[] @relation("following")  // 나를 팔로우하는 사람들
  following Follow[] @relation("follower")    // 내가 팔로우하는 사람들
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  contentId String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, contentId])
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  follower    User     @relation("follower", fields: [followerId], references: [id])
  following   User     @relation("following", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())

  @@unique([followerId, followingId])
}

model TMDBApiLog {
  id        Int      @id @default(autoincrement())
  type      String   // movie, tv, person
  tmdbId    Int      
  endpoint  String   
  timestamp DateTime @default(now())

  @@index([type, tmdbId])
  @@index([timestamp])
}

enum Role {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}
